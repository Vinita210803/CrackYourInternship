bool search(int i, int j, int idx, string &word, vector<vector<char>>& board, int n, int m, vector<vector<bool>> &vis){
        if(idx >= word.size()) return true;
        if(i < 0 || i >= n || j < 0 || j>= m || vis[i][j] == 1 || board[i][j] != word[idx]) return false;

        vis[i][j] = 1;

        bool left = search(i, j-1, idx+1, word, board, n, m, vis);
        bool right = search(i, j+1, idx+1, word, board, n, m, vis);
        bool down = search(i+1, j, idx+1, word, board, n, m, vis);
        bool up = search(i-1, j, idx+1, word, board, n, m, vis);

        vis[i][j] = 0;
        return left || right || down || up;
    }

    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size(), m = board[0].size();
        vector<vector<bool>> vis(n, vector<bool>(m, 0));

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(board[i][j] == word[0]){
                    bool ans = search(i, j, 0, word, board, n, m, vis);
                    if(ans) return true;
                }
            }
        }

        return false;
    }
