class Solution {
public:
    void merge(vector<int>&nums,int low,int mid,int high){
        vector<int> temp(high-low+1);
        int i=low, j=mid+1 , k = 0;
        while (i<=mid && j<=high) {
            if (nums[i]<=nums[j]) {
                temp[k++]=nums[i++];
            } else {
                temp[k++]=nums[j++];
            }
        }
        while (i<=mid) {
            temp[k++]=nums[i++];
        }
        while (j<=high) {
            temp[k++]=nums[j++];
        }
        for (int i = 0;i<temp.size();i++) {
            nums[low + i] = temp[i];
        }
    }
    int countpairs(vector<int>&nums,int low,int mid,int high){
        int j=mid+1;
        int cnt=0;
        for(int i=low;i<=mid;i++){
            while(j<=high && nums[i]>2LL*nums[j]){
                j++;
            }
            cnt+=(j-(mid+1));
        }
        return cnt;
    }
    int mergesort(vector<int>&nums,int low,int high){
        int cnt=0;
        if(low>=high) return 0;
        int mid=(low+high)/2;
        cnt+=mergesort(nums,low,mid);
        cnt+=mergesort(nums,mid+1,high);
        cnt+=countpairs(nums,low,mid,high);
        merge(nums,low,mid,high);
        return cnt;
    }
    int reversePairs(vector<int>& nums) {
          //method1
        // int n=nums.size();
        // int cnt=0;                              //O(n^2)
        // for (int i = 0; i < n - 1; ++i) {
        //     for (int j = n - 1; j > i; --j) {
        //          long long p = static_cast<long long>(nums[i]);
        //         long long q = static_cast<long long>(nums[j]) * 2;
        //          if (p > q) {
        //             cnt++;
        //         }
        //     }
        // }
        //  return cnt;

        int n=nums.size();              //O(n*logn)
        return mergesort(nums,0,n-1);
    }
};
